;; gorilla-repl.fileformat = 1

;; **
;;; # Gorilla REPL
;;; 
;;; Welcome to gorilla :-)
;;; 
;;; Shift + enter evaluates code. Hit alt+g twice in quick succession or click the menu icon (upper-right corner) for more commands ...
;;; 
;;; It's a good habit to run each worksheet in its own namespace: feel free to use the declaration we've provided below if you'd like.
;; **

;; @@
(ns screeching-spring
  (:require [gorilla-plot.core :as plot]
            [keychain.exchange.gdax :as gdax]
            [bookie.book.gdax :as gdaxb]
            [clojure.core.async :as a]))
;; @@

;; @@
(defn ->bids-xf
  [sequence-number]
  (map 
    (fn [[price size id :as order]]
      {:product_id "ETH-USD"
       :type "open"
       :side "buy"
       :sequence sequence-number
       :price (read-string price)
       :remaining_size (read-string size)
       :order_id id})))

(defn ->asks-xf
  [sequence-number]
  (map 
    (fn [[price size id :as order]]
      {:product_id "ETH-USD"
       :type "open"
       :side "sell"
       :sequence sequence-number
       :price (read-string price)
       :remaining_size (read-string size)
       :order_id id})))

(defn add-event
  [book {:keys [sequence type side product_id order_id] :as order}]
  (case type
    "match" (swap! book update-in [product_id :matches] #(conj % order))
    (swap! book update-in [product_id side order_id] #(conj % order))))

(defn start-order-book-maintainer
  [order-book subscription start-sequence add-fn]
  (let [feed (:feed subscription)]
    (a/go-loop
      [[timestamp event :as m] (a/<! feed)
       previous-sequence start-sequence]
      (when m
        (let [current-sequence (:sequence event)]
          (when (> current-sequence previous-sequence)
              (add-fn order-book event))
          (recur (a/<! feed) current-sequence))))))

  (defn load-snapshot
    [book {:keys [sequence bids asks] :as snapshot} add-fn]
    (let [bids-xf (->bids-xf sequence)
          asks-xf (->asks-xf sequence)]
      (doseq [order (flatten [(transduce bids-xf conj bids)
                              (transduce asks-xf conj asks)])]
        (add-fn book order))))

  (defn get-snapshot
    [client product]
    (gdax/get-product-order-book client product :level 3))

  (defn create-order-book
    [product]
    (let [order-book (atom {})
          subscription (gdax/subscribe [product])
          snapshot (get-snapshot (gdax/get-client) product)
          _ (load-snapshot order-book snapshot add-event)
          _ (start-order-book-maintainer order-book subscription (:sequence snapshot) add-event)]
      {:order-book order-book
       :close (:close subscription)}))
;; @@

;; @@
(def ob (create-order-book "ETH-USD"))
;; @@

;; @@
(-> @(:order-book ob)
    (get "ETH-USD")
    (get "sell")
    count)
;; @@

;; @@
((:close ob))
;; @@
